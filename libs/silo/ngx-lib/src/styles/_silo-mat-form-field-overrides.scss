@use '~@angular/material' as mat;
@mixin silo-mat-form-field-override-color($config-or-theme) {
  // Extract the color configuration in case a theme has been passed.
  $config: mat-get-color-config($config-or-theme);
  $primary: map-get($config, primary);
  $warn: map-get($config, warn);
  $is-dark: map-get($config, is-dark);

  // custom style for mat-form-field appearance="legacy"
  .mat-form-field-appearance-legacy {
    width: 100%;

    // hide label since we want to use custom label and placeholder
    .mat-form-field-label {
      display: none !important;
    }

    // custom outline
    .mat-form-field-flex {
      box-sizing: border-box;
      box-shadow: 0 0 0 1px gray;
      border-radius: 2px;

      &:focus-within {
        box-shadow: 0 0 0 2px mat.get-color-from-palette($primary);
      }
    }

    // custom required indicator
    .mat-form-field-infix {
      border-top: initial;
      padding: 0.5em 0.25em;
      border-left-width: 4px;
      border-left-style: solid;
      border-left-color: transparent;
    }

    // hide this since we want to use custom highlight with outline
    .mat-form-field-underline {
      display: none;
    }

    // center suffix on multi line such as textarea
    .mat-form-field-suffix {
      align-self: center;
    }

    // fix legacy suffix icon size
    .mat-form-field-suffix {
      .mat-icon-button {
        width: 2em;
        height: 2em;
        .mat-datepicker-toggle-default-icon {
          width: 1.5em;
          height: 1.5em;
        }
        .mat-icon {
          font-size: 1.5em !important;
        }
      }
    }
  }

  .silo-form-field--is-readonly {
    .mat-form-field-flex {
      cursor: initial !important;
      background-color: if($is-dark, $dark-bg-lighter-5, $light-bg-darker-5);
    }
  }

  .silo-form-field--is-required {
    .mat-form-field-flex {
      &:focus-within {
        box-shadow: 0 0 0 2px
          if(
            $is-dark,
            mat.get-color-from-palette($dark-theme-highlight),
            mat.get-color-from-palette($light-theme-highlight)
          );
      }
    }

    .mat-form-field-infix {
      border-left-color: if(
        $is-dark,
        mat.get-color-from-palette($dark-theme-highlight),
        mat.get-color-from-palette($light-theme-highlight)
      );
    }
  }

  .silo-form-field--has-error {
    .mat-form-field-flex {
      box-shadow: 0 0 0 2px mat.get-color-from-palette($warn);

      &:focus-within {
        box-shadow: 0 0 0 2px mat.get-color-from-palette($warn);
      }
    }

    .mat-form-field-infix {
      border-left-color: mat.get-color-from-palette($warn);
    }
  }

  .silo-form-field--is-filled {
    .mat-form-field-flex {
      &:focus-within {
        box-shadow: 0 0 0 2px
          if(
            $is-dark,
            mat.get-color-from-palette($dark-theme-success),
            mat.get-color-from-palette($light-theme-success)
          );
      }
    }

    .mat-form-field-infix {
      border-left-color: if(
        $is-dark,
        mat.get-color-from-palette($dark-theme-success),
        mat.get-color-from-palette($light-theme-success)
      );
    }
  }
}

@mixin silo-mat-form-field-override-theme($theme) {
  // Extracts the color and typography configurations from the theme.
  $color: mat-get-color-config($theme);

  // Do not generate styles if configurations for individual theming
  // systems have been explicitly set to `null`.
  @if $color !=null {
    @include silo-mat-form-field-override-color($color);
  }
}
