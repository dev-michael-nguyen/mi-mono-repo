@use 'sass:map';
@use '~@angular/material' as mat;

@mixin silo-mat-form-field-override-color($config-or-theme, $custom-theme) {
  // Extract the color configuration in case a theme has been passed.
  $color-config: mat.get-color-config($config-or-theme);
  $primary-palette: map.get($color-config, 'primary');
  $warn-palette: map.get($color-config, 'warn');
  $highlight-palette: map.get($custom-theme, 'palette', 'highlight');
  $success-palette: map.get($custom-theme, 'palette', 'success');
  $readonly-bg: map.get($custom-theme, 'background', 'readonly');

  // custom style for mat-form-field appearance="legacy"
  .mat-form-field-appearance-legacy {
    width: 100%;

    // hide label since we want to use custom label and placeholder
    .mat-form-field-label {
      display: none !important;
    }

    // custom outline
    .mat-form-field-flex {
      box-sizing: border-box;
      box-shadow: 0 0 0 1px gray;
      border-radius: 2px;

      &:focus-within {
        box-shadow: 0 0 0 2px mat.get-color-from-palette($primary-palette);
      }
    }

    // custom required indicator
    .mat-form-field-infix {
      border-top: initial;
      padding: 0.5em 0.25em;
      border-left-width: 4px;
      border-left-style: solid;
      border-left-color: transparent;
    }

    // hide this since we want to use custom highlight with outline
    .mat-form-field-underline {
      display: none;
    }

    // center suffix on multi line such as textarea
    .mat-form-field-suffix {
      align-self: center;
    }

    // fix legacy suffix icon size
    .mat-form-field-suffix {
      .mat-icon-button {
        width: 2em;
        height: 2em;
        .mat-datepicker-toggle-default-icon {
          width: 1.5em;
          height: 1.5em;
        }
        .mat-icon {
          font-size: 1.5em !important;
        }
      }
    }
  }

  .silo-form-field--is-readonly {
    .mat-form-field-flex {
      cursor: initial !important;
      background-color: $readonly-bg;
    }
  }

  .silo-form-field--is-required {
    .mat-form-field-flex {
      &:focus-within {
        box-shadow: 0 0 0 2px mat.get-color-from-palette($highlight-palette);
      }
    }

    .mat-form-field-infix {
      border-left-color: mat.get-color-from-palette($highlight-palette);
    }
  }

  .silo-form-field--has-error {
    .mat-form-field-flex {
      box-shadow: 0 0 0 2px mat.get-color-from-palette($warn-palette);

      &:focus-within {
        box-shadow: 0 0 0 2px mat.get-color-from-palette($warn-palette);
      }
    }

    .mat-form-field-infix {
      border-left-color: mat.get-color-from-palette($warn-palette);
    }
  }

  .silo-form-field--is-filled {
    .mat-form-field-flex {
      &:focus-within {
        box-shadow: 0 0 0 2px mat.get-color-from-palette($success-palette);
      }
    }

    .mat-form-field-infix {
      border-left-color: mat.get-color-from-palette($success-palette);
    }
  }
}

@mixin silo-mat-form-field-override-theme($theme, $custom-theme) {
  // Extracts the color and typography configurations from the theme.
  $color: mat.get-color-config($theme);

  // Do not generate styles if configurations for individual theming
  // systems have been explicitly set to `null`.
  @if $color !=null {
    @include silo-mat-form-field-override-color($color, $custom-theme);
  }
}
